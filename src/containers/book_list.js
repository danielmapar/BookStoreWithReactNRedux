import React, { Component } from 'react';
import { connect } from 'react-redux'; // With curly braces we pull of just a simple property
import { selectBook } from '../actions/index';
// Make sure the action generated by the action creator
// actually ends up flowing to all the different reducers
import { bindActionCreators } from 'redux';

// Combine React view and Redux state
// Lib called react-redux
// A Container is a better version of a Component, and it has
// a direct connection to the state managed by redux

class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      );
    });
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    );
  }
}

// This function is the magic about Redux, the glue
function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of BookList
  return {
    books: state.books
  };
}

// Make sure the action generated by the action creator
// actually ends up flowing to all the different reducers

// Anything returned from this function will end up as props
// on the BookList container
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed
  // to all of our reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// Connect will produce a container
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
